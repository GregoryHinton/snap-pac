#!/bin/bash

# snap-pac
# https://github.com/wesbarnett/snap-pac
# Copyright (C) 2016 James W. Barnett

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

# Main script.

set -e

SNAPPER_CONFIG_FILE=/etc/conf.d/snapper

ERRORMSG="    \033[00;31mERROR:\033[00m"
WARNINGMSG="    \033[00;33mWARNING:\033[00m"

PACMAN_ABORT_ON_FAIL="no"

# Virtual console fonts don't have the unicode checkmark
if [[ "$TERM" == "linux" ]]; then
    checkmark="done"
else
    checkmark="âœ“"
fi

if [[ -f "$SNAPPER_CONFIG_FILE" ]]; then
    source "$SNAPPER_CONFIG_FILE"
else
    echo -e "$ERRORMSG $SNAPPER_CONFIG_FILE does not exist!"
    exit 1
fi

if [[ $EUID -ne 0 ]]; then
    echo -e "$ERRORMSG Script must be run as root." 
    if [[ $PACMAN_ABORT_ON_FAIL == "yes" ]]; then
        exit 1
    else
        exit 0
    fi
fi

if [[ ! -d /var/run/dbus ]]; then
    echo -e "$ERRORMSG Unable to use snapper without dbus. Are you in a chroot environment?"
    if [[ $PACMAN_ABORT_ON_FAIL == "yes" ]]; then
        exit 1
    else
        exit 0
    fi
fi

if [[ $# -ne 1 ]]; then
    echo -e "$ERRORMSG Only one argument should be passed to this script."
    if [[ $PACMAN_ABORT_ON_FAIL == "yes" ]]; then
        exit 1
    else
        exit 0
    fi
fi

if [[ $1 != "pre" ]] && [[ $1 != "post" ]]; then
    echo -e "$ERRORMSG First argument should either be 'pre' or 'post'."
    if [[ $PACMAN_ABORT_ON_FAIL == "yes" ]]; then
        exit 1
    else
        exit 0
    fi
fi

if [[ -z "$SNAPPER_CONFIGS" ]]; then
    echo -e "$ERRORMSG No snapper configurations found, so not taking any snapshots!"
    if [[ $PACMAN_ABORT_ON_FAIL == "yes" ]]; then
        exit 1
    else
        exit 0
    fi
fi

declare -r pre_or_post=$1
declare pacman_cmd
pacman_cmd="$(sed 's./usr/bin/pacman.pacman.g' <(ps -C pacman -o args=))"

declare -i x=0
for CONFIG in $SNAPPER_CONFIGS; do

    # Set defaults
    PACMAN_PRE_POST="no"
    if [[ $CONFIG == "root" ]]; then
        PACMAN_PRE_POST="yes"
    fi
    PACMAN_PRE_DESCRIPTION="$pacman_cmd"
    PACMAN_POST_DESCRIPTION="$pacman_cmd"
    PACMAN_CLEANUP_ALGORITHM="number"

    # Source snapper configuration to override defaults
    source /etc/snapper/configs/"$CONFIG"

    echo -n "    $CONFIG "

    if [[ $PACMAN_PRE_POST == "yes" ]]; then 

        prefile="/tmp/snap-pac-pre_$CONFIG"
        snapper_cmd="snapper --config $CONFIG create --type $pre_or_post --cleanup-algorithm $PACMAN_CLEANUP_ALGORITHM"

        x=$((x+1))

        if [[ "$pre_or_post" == "pre" ]]; then
            $snapper_cmd --description "$PACMAN_PRE_DESCRIPTION" --print-number > "$prefile"
            echo -n "$(< "$prefile") "
            echo "$checkmark"
        elif [[ -f $prefile ]]; then
            postnum=$($snapper_cmd --description "$PACMAN_POST_DESCRIPTION" --print-number --pre-number "$(< "$prefile")")
            echo -n "$postnum "
            echo "$checkmark"
            rm "$prefile"
        else
            echo -e "$WARNINGMSG $prefile does not exist, so no post snapshot will be taken. If you are initially installing snap-pac, this is normal."
        fi

    else

        echo "N/A"
        
    fi

done

if [[ $x -eq 0 ]]; then
    echo -e "$ERRORMSG No snapper configurations are set up for snapshots to be taken!"
    if [[ $PACMAN_ABORT_ON_FAIL == "yes" ]]; then
        exit 1
    else
        exit 0
    fi
fi

exit 0
