#!/bin/bash

# snap-pac
# https://github.com/wesbarnett/snap-pac
# Copyright (C) 2016, 2017 James W. Barnett

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

# Main script.

declare -r SNAPPER_CONFIG_FILE=/etc/conf.d/snapper
declare -r DESC_LIMIT=48
declare -r name="snap-pac"
declare PACMAN_ABORT_ON_FAIL="no"

out() { printf "$1 $2\n" "${@:3}"; }
error() { out "==> \033[00;31mERROR:\033[00m" "$@"; } >&2
warning() { out "==> \033[00;33mWARNING:\033[00m" "$@"; } >&2
die() { 
    error "$@"
    [[ $PACMAN_ABORT_ON_FAIL == "no" ]] && exit 0
    exit 1
}
error_exit() { die "Encountered unknown error."; }
kill_exit() { die "\nExited due to user intervention."; }

truncate_description() {
    desc="$@"
    if [[ "${#desc}" -gt $DESC_LIMIT ]]; then 
        echo "$(echo $desc | cut -c 1-$DESC_LIMIT)..."
    else
        echo $desc
    fi
}

trap error_exit ERR
trap kill_exit SIGTERM SIGINT

[[ ! -f "$SNAPPER_CONFIG_FILE" ]] && die "%s does not exist!" "$SNAPPER_CONFIG_FILE"
source "$SNAPPER_CONFIG_FILE"

[[ $EUID -ne 0 ]] && die "Script must be run as root."
[[ ! -d /var/run/dbus ]] && die "No dbus available. Are you in a chroot environment?"
[[ $# -ne 1 ]] && die "Only one argument should be passed to this script."
[[ $1 != "pre" ]] && [[ $1 != "post" ]] && [[ $1 != "rem" ]] && die "First argument should either be 'pre', 'post', or 'rem'."
[[ -z "$SNAPPER_CONFIGS" ]] && die "No snapper configurations found, so not taking any snapshots."

declare -r pre_or_post=$1
declare pacman_cmd="$(sed 's./usr/bin/pacman.pacman.g' <(ps -C pacman -o args=))"

if [[ -z "$pacman_cmd" ]]; then
    warning "Did not find pacman running."
    pacman_cmd="pacman"
fi

declare -i x=0
for CONFIG in $SNAPPER_CONFIGS; do

    [[ "$pre_or_post" == "rem" ]] && rm -f "$prefile" && continue

    # Set defaults
    PACMAN_PRE_POST="no"
    [[ $CONFIG == "root" ]] && PACMAN_PRE_POST="yes"
    PACMAN_PRE_DESCRIPTION="$pacman_cmd"
    PACMAN_POST_DESCRIPTION="$pacman_cmd"
    PACMAN_CLEANUP_ALGORITHM="number"

    # Source snapper configuration to override defaults
    source /etc/snapper/configs/"$CONFIG"

    [[ $PACMAN_PRE_POST == "no" ]] && continue

    prefile="/tmp/$name-pre_$CONFIG"
    snapper_cmd="snapper --config $CONFIG create --type $pre_or_post --cleanup-algorithm $PACMAN_CLEANUP_ALGORITHM --print-number --description"

    x=$((x+1))

    if [[ "$pre_or_post" == "pre" ]]; then
        printf "==> %s: $($snapper_cmd "$(truncate_description $PACMAN_PRE_DESCRIPTION)" | tee "$prefile")\n" "$CONFIG"
    elif [[ -f $prefile && "$pre_or_post" == "post" ]]; then
        printf "==> %s: $($snapper_cmd "$(truncate_description $PACMAN_POST_DESCRIPTION)" --pre-number "$(< "$prefile")")\n" "$CONFIG"
        rm -f "$prefile"
    elif [[ ! -f $prefile && "$pre_or_post" == "post" ]]; then
        warning "%s does not exist, so no post snapshot for %s will be taken. If you are initially installing $name, this is normal." "$prefile" "$CONFIG"
    fi

done

[[ $x -eq 0 ]] && die "No snapper configurations are set up for snapshots to be taken."
