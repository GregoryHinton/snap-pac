#!/bin/bash

# snap-pac
# https://github.com/wesbarnett/snap-pac
# Copyright (C) 2016 James W. Barnett

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

# Main script. Is sourced in hooks and functions are called.
# e.g.: bash -c ". snap-pac; pre"

set -e

if [[ $EUID -ne 0 ]]; then
    echo "snap-pac must be sourced as root." 
    exit
fi

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    echo "This script is intended to be sourced from a pacman hook and not run on its own."
    exit
fi

# Have to store pre snapshot number in a file, since the script is run in a
# subshell. Exporting a variable doesn't seem to work
declare -r prefile_prefix="/usr/share/libalpm/hooks.bin/snap-pac/.pre"

# find any variables set in the snapper configuration files as well as set
# pacman_cmd
function read_configs
{
    declare -r pre_or_post=$1

    # pacman command that called the hook in the first place
    declare -r pacman_cmd="$(echo $(ps -C pacman -o args=) | sed 'sX/usr/bin/pacmanXpacmanXg')"

    declare -r snapper_config_dir="/etc/snapper/configs"
    configurations="$(ls $snapper_config_dir)"

    declare -i i=0
    for x in $configurations; do

        source $snapper_config_dir/$x

        if [[ $x == "root" ]]; then
            take_snapshot[i]=${PACMAN_PRE_POST:-"yes"}
        else
            take_snapshot[i]=${PACMAN_PRE_POST:-"no"}
        fi

        cleanupalgo[i]=${PACMAN_CLEANUP_ALGORITHM:-"number"}

        if [[ $pre_or_post == "pre" ]]; then
            description[i]=${PACMAN_PRE_DESCRIPTION:-"$pacman_cmd"}
        else
            description[i]=${PACMAN_POST_DESCRIPTION:-"$pacman_cmd"}
        fi

        i=$(($i+1))
    done
}

function pre
{
    read_configs pre
    declare -i i=0
    for x in $configurations; do
        if [[ ${take_snapshot[i]} == "yes" ]]; then
            snapper --config $x create --type pre --cleanup-algorithm ${cleanupalgo[i]} --print-number --description "${description[i]}" > $prefile_prefix"_"$x
        fi
        i=$(($i+1))
    done
}

function post 
{
    read_configs post
    declare -i i=0
    for x in $configurations; do
        if [[ ${take_snapshot[i]} == "yes" ]]; then
            if [ -f $prefile_prefix"_"$x ]; then
                snapper --config $x create --cleanup-algorithm ${cleanupalgo[i]} --type post --pre-number $(cat $prefile_prefix"_"$x) --description "${description[i]}"
                rm $prefile_prefix"_"$x
            else
                echo "WARNING: $prefile_prefix"_"$x does not exist, so no post snapshot for $x configuration will be taken. If you are initially installing snap-pac, this is normal."
            fi
        fi
        i=$(($i+1))
    done
}

function clean
{
    rm /usr/share/libalpm/hooks.bin/snap-pac/.pre*
    echo "NOTE: No post snapshot will be performed for this transaction, since you are removing the pacman hooks."
}
